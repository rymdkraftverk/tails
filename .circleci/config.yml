version: 2.1
commands:
  npm_install:
    parameters:
      dir:
        type: string
    steps:
      - restore_cache:
          name: "[<< parameters.dir >>] restore_cache"
          key: v1-npm-{{ checksum "<< parameters.dir >>/package-lock.json" }}
      - run:
          name: "[<< parameters.dir >>] npm ci"
          command: if [ ! -d "node_modules" ]; then npm ci; fi
          working_directory: << parameters.dir >>
      - save_cache:
          name: "[<< parameters.dir >>] save_cache"
          key: v1-npm-{{ checksum "<< parameters.dir >>/package-lock.json" }}
          paths:
          - "<< parameters.dir >>/node_modules"
jobs:
  setup:
    docker:
      - image: node:11.11
    working_directory: ~/tails
    steps:
      - checkout
      - run:
          name: Combine timestamp and sha of last commit to create version
          command: git show -s --format="%ct-%h" > version
      - npm_install:
         dir: "."
      - npm_install:
          dir: "controller"
      - npm_install:
          dir: "game"
      - npm_install:
          dir: "signaling"
      - npm_install:
          dir: "backend"
      - persist_to_workspace:
          paths: .
          root: .
  test:
    docker:
      - image: node:11.11
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run: npm test
      - run: npm run lint
  build_controller:
    docker:
      - image: node:11.11
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load version into env
          command: |
            echo 'export REACT_APP_VERSION=`cat ~/tails/version`' >> $BASH_ENV
      - run:
          command: npm run build
          working_directory: controller
      - persist_to_workspace:
          paths:
            - controller/build
          root: .
  deploy_controller:
    docker:
      - image: rymdkraftverk/ci:latest
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload to AWS S3
          command: aws s3 sync build/ s3://rkv-controller/ --acl public-read
          working_directory: controller
  build_game:
    docker:
      - image: node:11.11
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load version into env
          command: |
            echo 'export VERSION=`cat ~/tails/version`' >> $BASH_ENV
      - run:
          command: npm run build
          working_directory: game
      - persist_to_workspace:
          paths:
            - game/public
          root: .
  deploy_game_s3:
    docker:
      - image: rymdkraftverk/ci:latest
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload to AWS S3
          command: aws s3 sync public/ s3://rkv-game/ --acl public-read
          working_directory: game
  deploy_game_itch:
    docker:
      - image: rymdkraftverk/ci:latest
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload to itch.io
          command: butler push game/public rymdkraftverk/tails:web
  deploy_backend:
    docker:
      - image: rymdkraftverk/ci:latest
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - run: heroku git:remote --ssh-git -a rkv-backend
      - add_ssh_keys
      - run: ssh-keyscan -H heroku.com >> ~/.ssh/known_hosts
      - run: git push --force heroku $CIRCLE_BRANCH:master
      - run:
          name: Set version in env
          command: |
            VERSION=`cat ~/tails/version`
            heroku config:set VERSION=$VERSION -a rkv-backend
  tag:
    docker:
      - image: rymdkraftverk/ci:latest
    working_directory: ~/tails
    steps:
      - attach_workspace:
          at: .
      - add_ssh_keys
      - run: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run: |
          git tag `cat version`
          git push --tags
workflows:
  default:
    jobs:
      - setup
      - test:
          requires:
            - setup
      - build_controller:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_controller:
          requires:
            - build_controller
      - build_game:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_game_s3:
          requires:
            - build_game
      - deploy_game_itch:
          requires:
            - build_game
      - deploy_backend:
          requires:
            - test
          filters:
            branches:
              only: master
      - tag:
          requires:
            - deploy_controller
            - deploy_game_s3
            - deploy_game_itch
            - deploy_backend
